// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/csotherden/prescription-parser/ent/embedding"
	"github.com/csotherden/prescription-parser/ent/prescription"
	"github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
)

// Embedding is the model entity for the Embedding schema.
type Embedding struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Embedding holds the value of the "embedding" field.
	Embedding pgvector.Vector `json:"embedding,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmbeddingQuery when eager-loading is set.
	Edges                  EmbeddingEdges `json:"edges"`
	embedding_prescription *uuid.UUID
	selectValues           sql.SelectValues
}

// EmbeddingEdges holds the relations/edges for other nodes in the graph.
type EmbeddingEdges struct {
	// Prescription holds the value of the prescription edge.
	Prescription *Prescription `json:"prescription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PrescriptionOrErr returns the Prescription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmbeddingEdges) PrescriptionOrErr() (*Prescription, error) {
	if e.Prescription != nil {
		return e.Prescription, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: prescription.Label}
	}
	return nil, &NotLoadedError{edge: "prescription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Embedding) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case embedding.FieldEmbedding:
			values[i] = new(pgvector.Vector)
		case embedding.FieldID:
			values[i] = new(uuid.UUID)
		case embedding.ForeignKeys[0]: // embedding_prescription
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Embedding fields.
func (e *Embedding) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case embedding.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case embedding.FieldEmbedding:
			if value, ok := values[i].(*pgvector.Vector); !ok {
				return fmt.Errorf("unexpected type %T for field embedding", values[i])
			} else if value != nil {
				e.Embedding = *value
			}
		case embedding.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field embedding_prescription", values[i])
			} else if value.Valid {
				e.embedding_prescription = new(uuid.UUID)
				*e.embedding_prescription = *value.S.(*uuid.UUID)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Embedding.
// This includes values selected through modifiers, order, etc.
func (e *Embedding) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryPrescription queries the "prescription" edge of the Embedding entity.
func (e *Embedding) QueryPrescription() *PrescriptionQuery {
	return NewEmbeddingClient(e.config).QueryPrescription(e)
}

// Update returns a builder for updating this Embedding.
// Note that you need to call Embedding.Unwrap() before calling this method if this Embedding
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Embedding) Update() *EmbeddingUpdateOne {
	return NewEmbeddingClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Embedding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Embedding) Unwrap() *Embedding {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Embedding is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Embedding) String() string {
	var builder strings.Builder
	builder.WriteString("Embedding(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("embedding=")
	builder.WriteString(fmt.Sprintf("%v", e.Embedding))
	builder.WriteByte(')')
	return builder.String()
}

// Embeddings is a parsable slice of Embedding.
type Embeddings []*Embedding
