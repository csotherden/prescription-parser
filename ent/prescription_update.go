// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/csotherden/prescription-parser/ent/predicate"
	"github.com/csotherden/prescription-parser/ent/prescription"
	"github.com/csotherden/prescription-parser/pkg/models"
)

// PrescriptionUpdate is the builder for updating Prescription entities.
type PrescriptionUpdate struct {
	config
	hooks    []Hook
	mutation *PrescriptionMutation
}

// Where appends a list predicates to the PrescriptionUpdate builder.
func (pu *PrescriptionUpdate) Where(ps ...predicate.Prescription) *PrescriptionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetFileID sets the "file_id" field.
func (pu *PrescriptionUpdate) SetFileID(s string) *PrescriptionUpdate {
	pu.mutation.SetFileID(s)
	return pu
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableFileID(s *string) *PrescriptionUpdate {
	if s != nil {
		pu.SetFileID(*s)
	}
	return pu
}

// SetMimeType sets the "mime_type" field.
func (pu *PrescriptionUpdate) SetMimeType(s string) *PrescriptionUpdate {
	pu.mutation.SetMimeType(s)
	return pu
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableMimeType(s *string) *PrescriptionUpdate {
	if s != nil {
		pu.SetMimeType(*s)
	}
	return pu
}

// SetContent sets the "content" field.
func (pu *PrescriptionUpdate) SetContent(m models.Prescription) *PrescriptionUpdate {
	pu.mutation.SetContent(m)
	return pu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableContent(m *models.Prescription) *PrescriptionUpdate {
	if m != nil {
		pu.SetContent(*m)
	}
	return pu
}

// Mutation returns the PrescriptionMutation object of the builder.
func (pu *PrescriptionUpdate) Mutation() *PrescriptionMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PrescriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PrescriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PrescriptionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PrescriptionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PrescriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(prescription.Table, prescription.Columns, sqlgraph.NewFieldSpec(prescription.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.FileID(); ok {
		_spec.SetField(prescription.FieldFileID, field.TypeString, value)
	}
	if value, ok := pu.mutation.MimeType(); ok {
		_spec.SetField(prescription.FieldMimeType, field.TypeString, value)
	}
	if value, ok := pu.mutation.Content(); ok {
		_spec.SetField(prescription.FieldContent, field.TypeJSON, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PrescriptionUpdateOne is the builder for updating a single Prescription entity.
type PrescriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrescriptionMutation
}

// SetFileID sets the "file_id" field.
func (puo *PrescriptionUpdateOne) SetFileID(s string) *PrescriptionUpdateOne {
	puo.mutation.SetFileID(s)
	return puo
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableFileID(s *string) *PrescriptionUpdateOne {
	if s != nil {
		puo.SetFileID(*s)
	}
	return puo
}

// SetMimeType sets the "mime_type" field.
func (puo *PrescriptionUpdateOne) SetMimeType(s string) *PrescriptionUpdateOne {
	puo.mutation.SetMimeType(s)
	return puo
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableMimeType(s *string) *PrescriptionUpdateOne {
	if s != nil {
		puo.SetMimeType(*s)
	}
	return puo
}

// SetContent sets the "content" field.
func (puo *PrescriptionUpdateOne) SetContent(m models.Prescription) *PrescriptionUpdateOne {
	puo.mutation.SetContent(m)
	return puo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableContent(m *models.Prescription) *PrescriptionUpdateOne {
	if m != nil {
		puo.SetContent(*m)
	}
	return puo
}

// Mutation returns the PrescriptionMutation object of the builder.
func (puo *PrescriptionUpdateOne) Mutation() *PrescriptionMutation {
	return puo.mutation
}

// Where appends a list predicates to the PrescriptionUpdate builder.
func (puo *PrescriptionUpdateOne) Where(ps ...predicate.Prescription) *PrescriptionUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PrescriptionUpdateOne) Select(field string, fields ...string) *PrescriptionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Prescription entity.
func (puo *PrescriptionUpdateOne) Save(ctx context.Context) (*Prescription, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PrescriptionUpdateOne) SaveX(ctx context.Context) *Prescription {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PrescriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PrescriptionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PrescriptionUpdateOne) sqlSave(ctx context.Context) (_node *Prescription, err error) {
	_spec := sqlgraph.NewUpdateSpec(prescription.Table, prescription.Columns, sqlgraph.NewFieldSpec(prescription.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Prescription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prescription.FieldID)
		for _, f := range fields {
			if !prescription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != prescription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.FileID(); ok {
		_spec.SetField(prescription.FieldFileID, field.TypeString, value)
	}
	if value, ok := puo.mutation.MimeType(); ok {
		_spec.SetField(prescription.FieldMimeType, field.TypeString, value)
	}
	if value, ok := puo.mutation.Content(); ok {
		_spec.SetField(prescription.FieldContent, field.TypeJSON, value)
	}
	_node = &Prescription{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
